// Generated by CoffeeScript 1.3.3
(function() {
  var GridCell, GridColumn, GridRow, ResetBtn,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.unpack = function(obj) {
    var key, report, value;
    if (!(obj != null)) {
      return "undefined";
    }
    report = new Array();
    for (key in obj) {
      value = obj[key];
      if (value instanceof Function) {
        report.push(key + ":" + unpack(value));
      } else {
        if (key !== void 0) {
          report.push(key + ":" + value);
        }
      }
    }
    return report.join("\t");
  };

  window.Grid = (function() {
    var _this = this;

    Grid.anim_duration = 250;

    Grid.anim_cmd = {
      duration: Grid.anim_duration,
      queue: false,
      easing: "linear"
    };

    Grid.info_card_margin = 20;

    Grid.create_info_card = function(info, grid_member) {
      var div, info_card;
      div = document.createElement("div");
      info_card = $(div).html(info).addClass("info").css('margin', Grid.info_card_margin).width(grid_member.content_width() - (2 * Grid.info_card_margin)).height(grid_member.content_height() - (2 * Grid.info_card_margin)).addClass(grid_member.constructor.name.toLowerCase());
      info_card.appendTo(grid_member.element).position(grid_member.content_position());
      return info_card;
    };

    function Grid(table) {
      var all_columns_width, all_rows_height,
        _this = this;
      this.table = table;
      this.columns = $("th.col", this.table);
      this.rows = $("td.row", this.table);
      this.cells = $("td.cell", this.table);
      this.reset_btn = $("th#x", this.table);
      this.cell_color = "#222222";
      this.selected_row_color = "#873220";
      this.selected_column_color = "#9a1000";
      this.selected_cell_color = "#cc877f";
      this.info_card = null;
      if (this.cells.length !== (this.columns.length * this.rows.length)) {
        alert("Warning: " + this.cells.length + " cells for " + this.columns.length + " columns and " + this.rows.length + " rows.");
        return;
      }
      this.columns.each(function(index, column) {
        return new GridColumn(column, _this);
      });
      this.rows.each(function(index, row) {
        return new GridRow(row, _this);
      });
      this.cells.each(function(index, cell) {
        return new GridCell(cell, _this);
      });
      this.reset_btn.each(function(index, btn) {
        return new ResetBtn(btn, _this);
      });
      all_columns_width = this.columns.width() * this.columns.length;
      this.normal_column_width = all_columns_width / (1.0 * this.columns.length);
      this.unselected_column_width = all_columns_width / (1.0 * (this.columns.length + 1));
      this.selected_column_width = 2 * this.unselected_column_width;
      if (this.columns.length > 2) {
        this.unopened_column_width = all_columns_width / (1.0 * (this.columns.length + 2));
        this.opened_column_width = 3 * this.selected_column_width;
      } else {
        this.unopened_column_width = this.unselected_column_width;
        this.opened_column_width = this.selected_column_width;
      }
      all_rows_height = this.rows.height() * this.rows.length;
      this.normal_row_height = all_rows_height / (1.0 * this.rows.length);
      this.unselected_row_height = all_rows_height / (1.0 * (this.rows.length + 1));
      this.selected_row_height = 2 * this.unselected_row_height;
      if (this.rows.length > 2) {
        this.unopened_row_height = all_rows_height / (1.0 * (this.rows.length + 2));
        this.opened_row_height = 3 * this.unopened_row_height;
      } else {
        this.unopened_row_height = this.unselected_row_height;
        this.opened_row_height = this.selected_row_height;
      }
      this.columns.animate({
        width: this.normal_column_width
      }, 20, "linear");
      this.rows.animate({
        height: this.normal_row_height
      }, 20, Grid.anim_easing);
    }

    Grid.prototype.select_column = function(column_element, grid_column) {
      var column_opening_cmd;
      if (this.columns.length === 1) {
        return;
      }
      if (!(this.info_card === null)) {
        this.info_card.remove();
      }
      this.columns.not(column_element).animate({
        width: this.unselected_column_width
      }, Grid.anim_cmd);
      column_opening_cmd = $.extend({
        complete: grid_column.show_content
      }, Grid.anim_cmd);
      $(column_element).animate({
        width: this.selected_column_width
      }, column_opening_cmd);
      this.rows.nextAll().andSelf().animate({
        height: this.normal_row_height
      }, Grid.anim_cmd);
      this.rows.nextAll().animate({
        backgroundColor: this.cell_color
      }, Grid.anim_cmd);
      column_opening_cmd = $.extend({
        complete: grid_column.show_content
      }, Grid.anim_cmd);
      return grid_column.get_cells().animate({
        backgroundColor: this.selected_column_color
      }, Grid.anim_cmd);
    };

    Grid.prototype.select_row = function(row_element, grid_row) {
      var row_opening_cmd;
      if (this.rows.length === 1) {
        return;
      }
      if (!(this.info_card === null)) {
        this.info_card.remove();
      }
      this.rows.nextAll().andSelf().not(row_element).animate({
        height: this.unselected_row_height
      }, Grid.anim_cmd);
      grid_row.get_cells().animate({
        height: this.selected_row_height
      }, Grid.anim_cmd);
      row_opening_cmd = $.extend({
        complete: grid_row.show_content
      }, Grid.anim_cmd);
      $(row_element).animate({
        height: this.selected_row_height
      }, row_opening_cmd);
      this.columns.animate({
        width: this.normal_column_width
      }, Grid.anim_cmd);
      this.rows.nextAll().animate({
        backgroundColor: this.cell_color
      }, Grid.anim_cmd);
      return grid_row.get_cells().animate({
        backgroundColor: this.selected_row_color
      }, Grid.anim_cmd);
    };

    Grid.prototype.open_cell = function(cell_element, grid_cell) {
      var cell_column_element, cell_opening_cmd, cell_row_element, column_nbr, row_nbr;
      if (this.cells.length === 1) {
        return;
      }
      if (!(this.info_card === null)) {
        this.info_card.remove();
      }
      column_nbr = $(cell_element).data("column-nbr");
      row_nbr = $(cell_element).data("row-nbr");
      cell_column_element = this.columns.get(column_nbr - 1);
      cell_row_element = this.rows.get(row_nbr - 1);
      this.columns.not(cell_column_element).animate({
        width: this.unopened_column_width
      }, Grid.anim_cmd);
      $(cell_column_element).animate({
        width: this.opened_column_width
      }, Grid.anim_cmd);
      this.rows.nextAll().andSelf().not(cell_row_element).animate({
        height: this.unopened_row_height
      }, Grid.anim_cmd);
      $(cell_row_element).nextAll().andSelf().animate({
        height: this.opened_row_height
      }, Grid.anim_cmd);
      this.rows.nextAll().animate({
        backgroundColor: this.cell_color
      }, Grid.anim_cmd);
      $(cell_row_element).nextAll().animate({
        backgroundColor: this.selected_row_color
      }, Grid.anim_cmd);
      $(".cell[data-column-nbr=" + $(cell_column_element).data("ordinal") + "]").animate({
        backgroundColor: this.selected_column_color
      }, Grid.anim_cmd);
      cell_opening_cmd = $.extend({
        complete: grid_cell.show_content
      }, Grid.anim_cmd);
      return $(cell_element).animate({
        backgroundColor: "white"
      }, cell_opening_cmd);
    };

    Grid.prototype.reset = function() {
      if (!(this.info_card === null)) {
        this.info_card.remove();
      }
      this.cells.animate({
        width: this.normal_column_width,
        height: this.normal_row_height
      }, Grid.anim_cmd);
      this.columns.animate({
        width: this.normal_column_width
      }, Grid.anim_cmd);
      this.rows.animate({
        height: this.normal_row_height
      }, Grid.anim_cmd);
      this.rows.nextAll().animate({
        backgroundColor: this.cell_color
      }, Grid.anim_cmd);
      return this.columns.each(function(index, element) {
        return $(".cell[data-column-nbr=" + $(element).data("ordinal") + "]").animate({
          backgroundColor: this.cell_color
        }, Grid.anim_cmd);
      });
    };

    return Grid;

  }).call(this);

  GridColumn = (function() {

    function GridColumn(element, grid) {
      var _this = this;
      this.element = element;
      this.grid = grid;
      this.show_content = __bind(this.show_content, this);

      this.cells = this.get_cells();
      $(this.element).click(function(e) {
        return _this.grid.select_column(_this.element, _this);
      });
    }

    GridColumn.prototype.get_cells = function() {
      return $(".cell[data-column-nbr=" + $(this.element).data("ordinal") + "]");
    };

    GridColumn.prototype.show_content = function() {
      return this.grid.info_card = Grid.create_info_card("column info", this);
    };

    GridColumn.prototype.content_width = function() {
      return this.cells.width();
    };

    GridColumn.prototype.content_height = function() {
      return this.cells.height() * this.cells.length;
    };

    GridColumn.prototype.content_position = function() {
      return this.cells.eq(0).position();
    };

    return GridColumn;

  })();

  GridRow = (function() {

    function GridRow(element, grid) {
      var _this = this;
      this.element = element;
      this.grid = grid;
      this.show_content = __bind(this.show_content, this);

      this.cells = this.get_cells();
      $(this.element).click(function(e) {
        return _this.grid.select_row(_this.element, _this);
      });
    }

    GridRow.prototype.get_cells = function() {
      return $(this.element).nextAll();
    };

    GridRow.prototype.show_content = function() {
      return this.grid.info_card = Grid.create_info_card("row info", this);
    };

    GridRow.prototype.content_width = function() {
      return this.cells.width() * this.cells.length;
    };

    GridRow.prototype.content_height = function() {
      return this.cells.height();
    };

    GridRow.prototype.content_position = function() {
      return $(this.element).parent("tr").position();
    };

    return GridRow;

  })();

  GridCell = (function() {

    function GridCell(element, grid) {
      var _this = this;
      this.element = element;
      this.grid = grid;
      this.show_content = __bind(this.show_content, this);

      $(this.element).click(function(e) {
        if (!(_this.grid.info_card === null)) {
          _this.grid.info_card.remove();
        }
        return _this.grid.open_cell(_this.element, _this);
      });
    }

    GridCell.prototype.show_content = function() {};

    return GridCell;

  })();

  ResetBtn = (function() {

    function ResetBtn(element, grid) {
      var _this = this;
      this.element = element;
      this.grid = grid;
      $(this.element).click(function(e) {
        return _this.grid.reset();
      });
    }

    return ResetBtn;

  })();

  $(function() {
    var grid;
    return grid = new Grid($("table#grid"));
  });

}).call(this);
